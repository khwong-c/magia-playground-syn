{
  "Preset Counter": "from magia import Module, Input, Output, Signal, Register\n\n\nclass Top(Module):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        width = 8\n        self.io += [\n            Input(\"clk\", 1),\n            Input(\"preset\", 1),\n            Input(\"d\", width),\n            Output(\"q\", width),\n        ]\n        cur_count = Register(width, clk=self.io.clk)\n        cur_count <<= (cur_count + 1).when(~self.io.preset, else_=self.io.d)\n        self.io.q <<= cur_count\n",
  "Ripple Carry Adder": "from magia import Module, Input, Output, Signal\nfrom functools import reduce\n\n\nclass FullAdder(Module):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.io += [\n            Input(\"a\", 1),\n            Input(\"b\", 1),\n            Input(\"cin\", 1),\n            Output(\"q\", 1),\n            Output(\"cout\", 1),\n        ]\n        self.io.q <<= self.io.a ^ self.io.b ^ self.io.cin\n        self.io.cout <<= self.io.a & self.io.b | (self.io.cin & (self.io.a & self.io.b))\n\n\nclass RCA(Module):\n    def __init__(self, width, **kwargs):\n        super().__init__(**kwargs)\n\n        self.io += [\n            Input(\"a\", width),\n            Input(\"b\", width),\n            Input(\"cin\", 1),\n            Output(\"q\", width),\n            Output(\"cout\", 1),\n        ]\n        fa = FullAdder()\n        carry = self.io.cin\n        q = [Signal(1) for _ in range(width)]\n        for i in range(width):\n            fa_i = fa.instance(\n                io={\n                    \"a\": self.io.a[i],\n                    \"b\": self.io.b[i],\n                    \"cin\": carry,\n                    \"q\": q[i],\n                }\n            )\n            carry = fa_i.outputs.cout\n        output = reduce(\n          lambda reduced, bit: bit if reduced is None else bit @ reduced,\n          q, None\n        )\n\n        self.io.q <<= output\n        self.io.cout <<= carry\n\n\nclass Top(Module):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n\n        width = 6\n        self.io += [\n            Input(\"a\", width),\n            Input(\"b\", width),\n            Output(\"q\", width),\n            Input(\"cin\", 1),\n            Output(\"cout\", 1),\n        ]\n\n        RCA(width).instance(io={\n            \"a\": self.io.a,\n            \"b\": self.io.b,\n            \"cin\": self.io.cin,\n            \"q\": self.io.q,\n            \"cout\": self.io.cout,\n        })\n\n",
  "Sub Module": "from magia import Module, Input, Output\n\n\nclass SubMod(Module):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.io += [\n            Input(\"x0\", 8),\n            Input(\"x1\", 8),\n            Output(\"y0\", 8),\n            Output(\"y1\", 8),\n        ]\n        self.io.y0 <<= self.io.x0 + self.io.x1\n        self.io.y1 <<= self.io.x0 - self.io.x1\n\n\nclass Top(Module):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.io += [\n            Input(\"x0\", 8),\n            Input(\"x1\", 8),\n            Output(\"y0\", 8),\n            Output(\"y1\", 8),\n        ]\n\n        sub = SubMod()\n        sub0 = sub.instance(\n            io={\n                \"x0\": self.io.x0,\n                \"x1\": self.io.x1,\n            }\n        )\n        sub1 = sub.instance(\n            io={\n                \"x0\": sub0.outputs.y1,\n                \"x1\": sub0.outputs.y0,\n                \"y0\": self.io.y0,\n                \"y1\": self.io.y1\n            }\n        )\n"
}